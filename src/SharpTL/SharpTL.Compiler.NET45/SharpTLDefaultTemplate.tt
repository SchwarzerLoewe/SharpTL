<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="SharpTL.Compiler.Annotations" #>
<#@ import namespace="System.Linq" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SharpTL compiler (https://github.com/inTagger/SharpTL).
//     Generated at <#=DateTime.Now #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace <#=_templateVars.Namespace #>
{
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;
	using System.Linq;

	// TL constructors.

<# foreach (TLCombinator constructor in _templateVars.Schema.Constructors)
{
#>
	[TLObject(0x<#=constructor.Number.ToString("X8") #>)]
	public partial class <#=
    string.Format("{0}{1}", constructor.Name, _templateVars.Schema.Types.Contains(constructor.Type) ? " : " + constructor.Type.BuiltInName : String.Empty)
    #>
	{
<#
    int i = 0;
    foreach (TLCombinatorParameter parameter in constructor.Parameters)
    {
        TLSerializationMode? serModeOverride = parameter.Type.SerializationModeOverride;
#>
		[TLProperty(<#=++i #><#=serModeOverride.HasValue ? string.Format(", {0}", serModeOverride.Value) : String.Empty #>)]
		public <#=parameter.Type.BuiltInName #> <#= parameter.Name #> { get; set; }

<# } #>
	}

<# } #>
	
	// TL types.

<# foreach (TLType type in _templateVars.Schema.Types)
{
#>
	[TLType(<#=type.Constructors.Select(constructor => string.Format("typeof({0})", constructor.Name)).Aggregate((s, s1) => s + ", " + s1)
    #>)]
	public abstract partial class <#=type.Name #>
	{
	}

<# } #>

}
<#+[UsedImplicitly] private TemplateVars _templateVars; #>